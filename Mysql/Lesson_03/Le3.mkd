# 기본 조작

## WHERE절

###
조건에 맞는 데이터 가져오기
SELECT name FROM tbl_address WHERE zip_code = '120-011';
-----
exam)
name   | zip_code | address
김상택 | 120-011  | 서울시 종로구
강택구 | 600-816  | 부산시 중구
박도일 | 120-011  | 서울시 종로구
이소림 | 500-131  | 광주시 북구

USE db_picbook;
SELECT name FROM tbl_exam WHERE id = 3;

### 조건에 맞는 데이터를 정렬하여 가져오기
tbl_exam
id | name   | score_kor | score_eng
1  | 김상택 | 100       | 98
2  | 최산해 | 75        | 80
3  | 강택구 | 70  	| 93
4  | 이소림 | 54 	| 65

SELECT * FROM tbl_exam  WHERE score_eng >= 90 ORDER BY id DESC

id | name   | score_kor | score_eng
3  | 강택구 | 70 	| 93
1  | 김상택 | 100 	| 98

USE db_picbook;
SELECT * FROM tbl_exam WHERE score_kor = 100;
SELECT * FROM tbl_exam WHERE score_eng >= 80 ORDER BY score_eng DESC;

id | name   | score_kor | score_eng
1  | 김상택 | 100 	| 98
3  | 강택구 | 70 	| 93
2  | 최산해 | 75        | 80

## 산술 연산자
USE db_picbook;
SELECT name, (score_lor + score_eng) AS total FROM tbl_exam;
name | total
김상택 |
최신해 |
강택구 |
이소림
USE db_picbook;
SELECT name, (score_kor + score_eng) AS total FROM tbl_exam;

연산자 우선 순위 지정하기
use
SELECT name, (score_kor + score_eng) / 2 AS average FROM tbl_exam BY average DESC;
name   | average
김상택 | 99
강택구 | 81
최산해 | 77
이소림 | 59

### 조건식의 평가
USE db_picbook;
SELECT id, name, score_eng FROM tbl_exam WHERE score_eng > 90;
SELECT id, name, score_kor FROM tbl_exam WHERE name = '김상택';

id | name   | score_eng
1  | 김상택 | 98
3  | 강택구 | 93

id | name   | score_eng
1  | 김상택 | 98

### 논리 연산자

USE db_picbook;
SELECT * FROM tbl_exam
WHERE ((id % 2) < 1) AND (score_eng >= 80);

SELECT * FROM tbl_exam
WHERE (score_kor >= 90) OR (score_eng >= 90);

SELECT * FROM tbl_exam
WHERE NOT ((score_kor + score_eng) > 15 ((score_kor + score_eng) > 1500);

id | name   | score_kor | score_eng
2  | 최산해 | 75        | 80
++++++++++++++++++++++++++++++
id | name   | score_kor | score_eng
1  | 김상택 | 100       | 98
3  | 강택구 | 70        | 93
+++++++++++++++++++++++++++++++
id | name   | score_kor | score_eng
4  | 이소림 | 54        | 65
+++++++++++++++++++++++++++++++

## 문자 처리 연산자

### 문자 연결 연산자
USE db_picbook;
SELECT lastname + ' ' + firstname AS name FROM tbl_stdlist;

name    |
김 상택 |
최 산해 |
강 택구 |
이 소림 |
' ' 으로 인해 성과 이름에서 공백이 발생 한다.

### 문자열 비교
SELECT name FROM tbl_namecard WHERE name LIKE '이%';

### 조건 지정
기호 | 기능                            | 사용법 | 의미
%    | 0~임의의 수의 문자열에 해당한다 | %산%   | 설악산, 산촌 등 '산'이 포함된 문자열
-    | 한 문자에 해당한다.             | _해준  | 이해준, 민해준, 등 '해준'앞에 임의의 한 문자가 들어간 문자열

USE db_picbook;
SELECT * FROM tbl_stdlist WHERE firstname LIKE '%택%';
SELECT * FROM tbl_stdlist WHERE firstname LIKE '택_';

id | lastname | firstname
1  | 김       | 상택
3  | 강	      | 택구

id | lastname | firstname
3  | 강       | 택구

## 기타 연산자
### BETWEEN 연산자
SELECT score FROM game WHERE score BETWEEN 10 AND 100;

USE db_picbook;
SELECT * FROM tbl_exam WHERE score_eng BETWEEN 90 AND 100;

### IS NULL 연산자
열이름 IS NULL : 지정한 열의 값이 NULL이면 TRUE, NULL이 아니면 FALSE
열이름 IS NOT NULL : 지정한 열의 값이 NULL이 아니면 TRUE, NULL이면 FALSE

USE db_picbook;
SELECT * FROM tbl_bookprice WHERE price IS NOT NULL;
SELECT title + '은 가격 미정' FROM tbl_bookprcie WHERE price IS NULL;

code | title | price
1    | C가 보이는 그림책 | 12000
2    | Java가 보이는 그림책 | 13000
------------------------------
SQL이 보이는 그림책은 가격 미정

## 기타 연산자 (2)
### IN 연산자
SELECT player FROM tbl_team WHERE backno IN (5, 10, ...);
### NOT IN 연산자
SELECT player FROM tbl_team WHERE backno NOT IN (1, 9, ....);

USE db_picbook;
SELECT * FROM tbl_exam WHERE id IN (2, 4);

id | name | score-kor | score-eng
2 | 최신해 | 75 | 80
4 | 이소림 | 54 | 65

### 비교 연산자를 사용한 경우와의 차이점
std_no
IN을 사용 std_no IN (5, 10)
OR를 사용 (std_no = 5) OR (std_no = 10)

std_no 열이 5와 10 이외인 데이터
IN을 사용 std_no NOT IN (5, 10)
OR를 사용 (std_no != 5) AND (std_no != 10)

USE db_picbook;
SELECT * FROM tbl_exam WHERE id IN (1, 3);
SELECT * FROM tbl_exam WHERE id NOT IN (1, 3);

id | name   | score_kor | score_eng
1  | 김상택 | 100       | 98
3  | 강택구 | 70  	| 93

id | name   | score_kor | score_eng
2  | 최산해 | 75 	| 80
4  | 이소림 | 54 	| 65

----------------------------------------------

exam 3-1 

USE db_picbook;
CREATE TABLE tbl-exam (
	id INT PRIMARY KEY,
	name VARCHAR(20),
	score_kor  INT,
	score_eng INT
);

INSERT INTO tbl_exam (id, name score_kor, score_eng)
	VALUES (1, '김상택', 100, 98);
INSERT INTO tbl_exam (id, name score_kor, score_eng)
	VALUES (2, '최산해', 75, 80);
INSERT INTO tbl_exam (id, name score_kor, score_eng)
	VALUES (3, '강택구', 70, 93);
INSERT INTO tbl_exam (id, name score_kor, score_eng)
	VALUES (4, '이소림', 54, 65);

exam 3-2
USE db_picbook;
CREATE TABLE tbl_stdlist (
	id INT PRIMARY KEY,
	lastname VARCHAR(10),
	firstname VARCHAR(10),
);

INSERT INTO tbl_stdlist (id, lastname, firstname)
	VALUES (1, '김', '상택');
INSERT INTO tbl_stdlist (id, lastname, firstname)
	VALUES (2, '최', '산해');
INSERT INTO tbl_stdlist (id, lastname, firstname)
	VALUES (3, '강', '택구');
INSERT INTO tbl_stdlist (id, lastname, firstname)
	VALUES (4, '이', '소림');

exam 3-3 
USE db_picbook;
CREATE TABLE tbl_bookprice (
	code INT PRIMARY KEY,
	title VARCHAR(20),
	price  INT,
);

INSERT INTO tbl_bookprice (id, name score_kor, score_eng) VALUES (1, '김상택', 100, 98);
INSERT INTO tbl_bookprice (id, name score_kor, score_eng) VALUES (2, '최산해', 75, 80);
INSERT INTO tbl_bookprice (id, name score_kor, score_eng) VALUES (3, '강택구', 70, 93);
INSERT INTO tbl_bookprice (id, name score_kor, score_eng) VALUES (4, '이소림', 54, 65);
