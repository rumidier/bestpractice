#!/usr/bin/env perl 
# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Data/Section/Simple.pm"} = <<'DATA_SECTION_SIMPLE';
  package Data::Section::Simple;
  
  use strict;
  use 5.008_001;
  our $VERSION = '0.02';
  
  use base qw(Exporter);
  our @EXPORT_OK = qw(get_data_section);
  
  sub new {
      my($class, $pkg) = @_;
      bless { package => $pkg || caller }, $class;
  }
  
  sub get_data_section {
      my $self = ref $_[0] ? shift : __PACKAGE__->new(scalar caller);
  
      if (@_) {
          return $self->get_data_section->{$_[0]};
      } else {
          my $d = do { no strict 'refs'; \*{$self->{package}."::DATA"} };
          return unless defined fileno $d;
  
          seek $d, 0, 0;
          my $content = join '', <$d>;
          $content =~ s/^.*\n__DATA__\n/\n/s; # for win32
          $content =~ s/\n__END__\n.*$/\n/s;
  
          my @data = split /^@@\s+(.+?)\s*\r?\n/m, $content;
          shift @data; # trailing whitespaces
  
          my $all = {};
          while (@data) {
              my ($name, $content) = splice @data, 0, 2;
              $all->{$name} = $content;
          }
  
          return $all;
      }
  }
  
  1;
  __END__
  
  =encoding utf-8
  
  =for stopwords
  
  =head1 NAME
  
  Data::Section::Simple - Read data from __DATA__
  
  =head1 SYNOPSIS
  
    use Data::Section::Simple qw(get_data_section);
  
    # Functional interface -- reads from caller package __DATA__
    my $all = get_data_section; # All data in hash reference
    my $foo = get_data_section('foo.html');
  
    # OO - allows reading from other packages
    my $reader = Data::Section::Simple->new($package);
    my $all = $reader->get_data_section;
  
    __DATA__
  
    @@ foo.html
    <html>
     <body>Hello</body>
    </html>
  
    @@ bar.tt
    [% IF true %]
      Foo
    [% END %]
  
  =head1 DESCRIPTION
  
  Data::Section::Simple is a simple module to extract data drom
  C<__DATA__> section of the file.
  
  =head1 LIMITATIONS
  
  As the name suggests, this module is a simpler version of the
  excellent L<Data::Section>. If you want more functionalities such as
  merging data sections or changing header patterns, use
  L<Data::Section> instead.
  
  This module does not implement caching (yet) which means in every
  C<get_data_section> or C<< get_data_section($name) >> this module
  seeks and re-reads the data section. If you want to avoid doing so for
  the better performance, you should implement caching in your own
  caller code.
  
  =head1 BUGS
  
  If you data section has literal C<__DATA__> in the data section, this
  module might be tricked by that. Although since its pattern match is
  greedy, C<__DATA__> appearing I<before> the actual data section
  (i.e. in the code) might be okay.
  
  This is by design -- in thoery you can C<tell> the DATA handle before
  reading it, but then reloading the data section of the file (handy for
  developing inline templates with PSGI web applications) would fail
  because the pos would be changed.
  
  If you don't like this design, again, use the superior
  L<Data::Section>.
  
  =head1 AUTHOR
  
  Tatsuhiko Miyagawa E<lt>miyagawa@bulknews.netE<gt>
  
  =head1 COPYRIGHT
  
  Copyright 2010- Tatsuhiko Miyagawa
  
  The code to read DATA section is based on Mojo::Command get_all_data:
  Copyright 2008-2010 Sebastian Riedel
  
  =head1 LICENSE
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =head1 SEE ALSO
  
  L<Data::Section> L<Inline::Files>
  
  =cut
DATA_SECTION_SIMPLE

$fatpacked{"Test/Module.pm"} = <<'TEST_MODULE';
  package Test::Module;
  
  use 5.010000;
  use strict;
  use warnings;
  use Data::Section::Simple qw(get_data_section);
  
  require Exporter;
  
  our @ISA = qw(Exporter);
  
  # Items to export into callers namespace by default. Note: do not export
  # names by default without a very good reason. Use EXPORT_OK instead.
  # Do not simply export all your public functions/methods/constants.
  
  # This allows declaration	use Test::Module ':all';
  # If you do not need this, moving things directly into @EXPORT or @EXPORT_OK
  # will save memory.
  our @EXPORT = qw(
          cat_input
          index_out
  );
  our %EXPORT_TAGS = ( 'all' => [ @EXPORT ] );
  our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );
  
  our $VERSION = '0.01';
  sub index_out {
      my (@fn) = @_;
      my $file_index;
  
      foreach (@fn) {
          $file_index = get_data_section($_);
          open my $fh, '>', $_ or die "data_file: $_";
          print $fh $file_index;
          close $fh;
      }
  }
  
  sub cat_input {
      my ($nomal, @in_put) = @_;
      my @out_put;
  
      if (@in_put) {
          foreach (@in_put) {
              given ($_) {
                  when (@$nomal) {
                      push(@out_put, $_);
                  }
                  default {
                      print "BUG [$_] 그런 파일이나 디렉터리가 없습니다.\n";
                  }
              }
          }
      }
      else {
          @out_put = @$nomal;
      }
  
      @out_put ? return @out_put : return @out_put = @$nomal;
  }
  # Preloaded methods go here.
  1;
  __DATA__
  @@ start.html
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Stric//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  
  <html>
     <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTP-8" />
        <title>Main title</title>
     </head>
     <body>
        <form action="http://www.headfirstlabs.com/contest.php" mehod="POST">
           <p> Just type in your name (and click Submit) to
           enter the contest <br />
           First name: <input type="text" name="firstname" value="" /> <br />
       Last name:  <input type="text" name="lastname"  value="" /> <br />
       <input type="submit" />
  
       <textarea name="comments" rows="10" cols="48"> </textarea>
  
       <select name="characters">
        </form>
     </body>
  </html>
  
  @@ start.mkd
  A First Level Headder
  =====================
  
  A Second Level Headder
  ---------------------
  사람들은 모국어로 지원을 하며
  이것을 일반적인 파라 그래프 입니다.
  
  날쌘 갈색 여우는 게으른 개뒤로 뛰어 넘었다.
  
  ### Header 3
  > 이부분은 blockquote 입니다.
  >
  > 두번째 blockquote 입니다. 
  >
  > ##blockquote 부분의 H2 부분 입니다.
  
  강조 구절:
  
  강조 하는 단어는(뉘입니다) *em 과 같습니다*
  강조 하는 단어는  _em 과 같습니다_
  
  별표를 두개씩 써도 됩니다(두껍게 합니다) **strong 와 같습니다**
  또한 언더파를 두개씩 써도 됩니다 __strong 와 같습니다__
  
  리스트
  ul은 (* + -)  로 합니다. ol은 (1. str)입니다;
  
  ul:
  
  * first.
  * second.
  * third.
  
  ul:
  
  + first
  + second
  + third
  
  ul:
  
  - first
  - second
  - third
  
  ol:
  
  1. first
  2. second
  3. third
  
  리스트 사이에 tab넣기(스페이스 4칸)
  
      tab:
  
      * 아이템이 있고
  
      들여쓰기가 된다 근데 이상하다.
  
      * 또다른 아이템이 온다.
  
      링크
      -----------------------------
  
      링크시 마크다운의 두가지기능
      ----------------------------
  
  첫번째
  this is an [example link](http://naver.com/)
  
  두번째
  This is an [example link](http://navar.com/ "Witha Title")
  
  또 다른 스타일
  I het 10 times more traffic from[google][1] than from
  [yahoo][2] or [naver][3]
  
  [1]: http://google.com/     "google"
  [2]: http://search.yahoo.com/   "Yahoo Search"
  [3]: http://naver.com/      "naver"
  
  그외 스타일
  I start my morning with a cup of coffee and
  [The New york Times][NY Times]
  
  [ny times]: http://www.nytimes.com/
  
  사진
  ------------
  ![alt text](image/jun.jpg "Title")
  
  사진 다른 스타일
  ![alt text][id]
  
  [id]: image/jun.jpg "Title"
  
  ### Code ###
  
  I strongly recommend against using any `<blink>` tags.
  
  I wish SmartyPants used named entities like `&mdash;`
  instead of decimal-encoded entites like `&#8212;`.
  
  Use the `printf ()` function.
  
  ``There is a literal backtick (`) here.``
  
  __END__
  # Below is stub documentation for your module. You'd better edit it!
  
  =head1 NAME
  
  Test::Module - Perl extension for blah blah blah
  
  =head1 SYNOPSIS
  
    use Test::Module;
    blah blah blah
  
  =head1 DESCRIPTION
  
  Stub documentation for Test::Module, created by h2xs. It looks like the
  author of the extension was negligent enough to leave the stub
  unedited.
  
  Blah blah blah.
  
  =head2 EXPORT
  
  None by default.
  
  
  
  =head1 SEE ALSO
  
  Mention other useful documentation such as the documentation of
  related modules or operating system documentation (such as man pages
  in UNIX), or any relevant external documentation such as RFCs or
  standards.
  
  If you have a mailing list set up for your module, mention it here.
  
  If you have a web site set up for your module, mention it here.
  
  =head1 AUTHOR
  
  rumidier, E<lt>rumidier@(none)E<gt>
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright (C) 2011 by rumidier
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself, either Perl version 5.14.1 or,
  at your option, any later version of Perl 5 you may have available.
  
  
  =cut
  
  __END__
  # Below is stub documentation for your module. You'd better edit it!
  
  =head1 NAME
  
  Test::Module - Perl extension for blah blah blah
  
  =head1 SYNOPSIS
  
    use Test::Module;
    blah blah blah
  
  =head1 DESCRIPTION
  
  Stub documentation for Test::Module, created by h2xs. It looks like the
  author of the extension was negligent enough to leave the stub
  unedited.
  
  Blah blah blah.
  
  =head2 EXPORT
  
  None by default.
  
  
  
  =head1 SEE ALSO
  
  Mention other useful documentation such as the documentation of
  related modules or operating system documentation (such as man pages
  in UNIX), or any relevant external documentation such as RFCs or
  standards.
  
  If you have a mailing list set up for your module, mention it here.
  
  If you have a web site set up for your module, mention it here.
  
  =head1 AUTHOR
  
  rumidier, E<lt>rumidier@(none)E<gt>
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright (C) 2011 by rumidier
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself, either Perl version 5.14.1 or,
  at your option, any later version of Perl 5 you may have available.
  
  
  =cut
TEST_MODULE

s/^  //mg for values %fatpacked;

unshift @INC, sub {
  if (my $fat = $fatpacked{$_[1]}) {
    open my $fh, '<', \$fat
      or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
    return $fh;
  }
  return
};

} # END OF FATPACK CODE

use 5.010;
use strict;
use warnings;
use Test::Module;

my @nomal_files = qw/ start.html start.mkd /;

my @input_files = cat_input (\@nomal_files, @ARGV);
index_out (@input_files);
